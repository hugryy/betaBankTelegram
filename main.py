import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
import config
import sqlite3
from datetime import datetime
import random

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
storage = MemoryStorage()
bot = Bot(token=config.tgtoken)
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)
now = datetime.now()

backtomenu = KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
backtomenu_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(backtomenu)
bank = KeyboardButton('üíµ –ë–∞–Ω–∫')
bank_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(bank)

class Form(StatesGroup):
    cardname = State()

class logsemployee(StatesGroup):
    nickname = State()
class TransferForm(StatesGroup):
    cardnum = State()
    amount = State()
    comment = State()

class clientReg(StatesGroup):
    cID = State()
    Nickname = State()

class senderForm(StatesGroup):
    sender = State()

class topup(StatesGroup):
    cardnum = State()
    tuAmount = State()

class withdrawal(StatesGroup):
    cardnum = State()
    tuAmount = State()


@dp.message_handler(commands=['start', 'bank'])
async def banking(message: types.Message):
    conn = sqlite3.connect('db.db')
    c = conn.cursor()
    c.execute("SELECT * FROM cards WHERE oID = ?", (message.from_user.id,))
    card = c.fetchone()
    if card is None:
        keyboard = InlineKeyboardMarkup(row_width=1)
        buttons = [
            InlineKeyboardButton(text="–Ø –æ—Ç–∫—Ä—ã–ª –∫–∞—Ä—Ç—É", callback_data="button_update"),
        ]
        keyboard.add(*buttons)
        await message.reply(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–µ—Ç–∞-–ë–∞–Ω–∫\n–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á—ë—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –æ—Ç–¥–µ–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞\n–ö–æ–¥: {message.from_user.id}", reply_markup=bank_kb)
    else:
        keyboard = InlineKeyboardMarkup(row_width=1)
        buttons = [
            InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã", callback_data="button_transfer"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–∞—Ä—Ç—ã", callback_data="button_cardnamechange"),
        ]
        keyboard.add(*buttons)
        await bot.send_message(message.chat.id, f"üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å, {card[1]}!\nüí≥ –ö–∞—Ä—Ç–∞:\n{card[2]} **{card[3]}\n–ë–∞–ª–∞–Ω—Å: {card[4]} –ê–†\nüëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)

@dp.message_handler(commands=['getid'])
async def getid(message: types.Message):
    await message.reply(message.from_user.id)


@dp.callback_query_handler(lambda c: c.data.startswith('button'))
async def process_callback_button(callback_query: types.CallbackQuery):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if callback_query.data == "button_transfer":
        conn = sqlite3.connect('db.db')
        c = conn.cursor()
        c.execute("SELECT * FROM cards WHERE oID = ?", (callback_query.from_user.id,))
        card = c.fetchone()
        c.execute("SELECT * FROM ban WHERE Nickname = ?", (card[1],))
        banlist = c.fetchone()
        if banlist is None:
            await TransferForm.cardnum.set()
            await bot.send_message(callback_query.from_user.id, "üí∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                                   reply_markup=backtomenu_kb)
        else:
            await bot.send_message(callback_query.from_user.id, f'üö´ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É —Å—á—ë—Ç—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–≤—è–∑–∏ —Å –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–º –≤ –±–∞–Ω–∫ –∑–∞–ø—Ä–æ—Å–æ–º –æ –Ω–∞–ª–æ–∂–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n{banlist[1]}\n–î–ª—è —Å–Ω—è—Ç–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞')
    elif callback_query.data == "button_cardnamechange":
        await Form.cardname.set()
        await bot.send_message(callback_query.from_user.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–∞—Ä—Ç—ã", reply_markup=backtomenu_kb)
    elif callback_query.data == "button_update":
        conn = sqlite3.connect('db.db')
        c = conn.cursor()
        c.execute("SELECT * FROM cards WHERE oID = ?", (callback_query.from_user.id,))
        card = c.fetchone()
        print(callback_query.from_user.id)
        if card is None:
            keyboard = InlineKeyboardMarkup(row_width=1)
            buttons = [
                InlineKeyboardButton(text="–Ø –æ—Ç–∫—Ä—ã–ª –∫–∞—Ä—Ç—É", callback_data="button_update"),
            ]
            keyboard.add(*buttons)
            await callback_query.message.reply(f"–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=bank_kb)
        else:
            keyboard = InlineKeyboardMarkup(row_width=1)
            buttons = [
                InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã", callback_data="button_transfer"),
                InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–∞—Ä—Ç—ã", callback_data="button_cardnamechange"),
            ]
            keyboard.add(*buttons)
            await bot.send_message(callback_query.message.chat.id,
                                   f"üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å, {card[1]}!\nüí≥ –ö–∞—Ä—Ç–∞:\n{card[2]} **{card[3]}\n–ë–∞–ª–∞–Ω—Å: {card[4]} –ê–†\nüëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                                   reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(Text(equals='üíµ –±–∞–Ω–∫', ignore_case=True))
async def bank_button(message: types.Message):
    await banking(message)

@dp.message_handler(Text(equals='–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    # Cancel state and inform user about it
    await state.finish()
    # And remove keyboard (just in case)
    await message.reply('–í—Ö–æ–¥ –≤ –º–µ–Ω—é', reply_markup=bank_kb)
    await banking(message)

@dp.message_handler(state=Form.cardname)
async def process_name(message: types.Message, state: FSMContext):
    await state.finish()
    conn = sqlite3.connect('db.db')
    c = conn.cursor()
    c.execute("UPDATE cards SET Name = ? WHERE oID = ?", (message.text, message.from_user.id))
    conn.commit()
    conn.close()
    await banking(message)

@dp.callback_query_handler(lambda c: c.data.startswith('service'))
async def process_callback_button(callback_query: types.CallbackQuery):
    if callback_query.data == "service_reg":
        await clientReg.cID.set()
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫–æ–º", reply_markup=backtomenu_kb)
    elif callback_query.data == "service_topup":
        await topup.cardnum.set()
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", reply_markup=backtomenu_kb)
    elif callback_query.data == "service_withdrawal":
        await withdrawal.cardnum.set()
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", reply_markup=backtomenu_kb)

@dp.message_handler(commands=['service'])
async def service(message: types.Message):
    conn = sqlite3.connect('db.db')
    c = conn.cursor()
    c.execute("SELECT * FROM Employees WHERE ID = ?", (message.from_user.id,))
    employee = c.fetchone()
    if employee is None:
        pass
    else:
        keyboard = InlineKeyboardMarkup(row_width=1)
        buttons = [
            InlineKeyboardButton(text="üí≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞", callback_data="service_reg"),
            InlineKeyboardButton(text="üí∞ –í–Ω–µ—Å–µ–Ω–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö", callback_data="service_topup"),
            InlineKeyboardButton(text="üí∏ –í—ã–¥–∞—á–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö", callback_data="service_withdrawal"),
        ]
        keyboard.add(*buttons)
        await bot.send_message(message.from_user.id, "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)

@dp.message_handler(commands=['sender'])
async def sender(message: types.Message):
    conn = sqlite3.connect('db.db')
    c = conn.cursor()
    c.execute("SELECT * FROM Employees WHERE ID = ?", (message.from_user.id,))
    employee = c.fetchone()
    if employee is None:
        pass
    else:
        await senderForm.sender.set()
        await bot.send_message(message.from_user.id, "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=backtomenu_kb)


@dp.message_handler(lambda message: not message.text.isdigit(), state=TransferForm.cardnum)
async def cardnum_invalid(message: types.Message):
    return await message.reply("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 —Ü–∏—Ñ—Ä\n–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ")

@dp.message_handler(state=TransferForm.cardnum)
async def cardnum(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('db.db')
    c = conn.cursor()
    c.execute("SELECT * FROM cards WHERE Number = ?", (message.text,))
    card = c.fetchone()
    if card is None:
        await message.reply("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –µ—â–µ —Ä–∞–∑")
    else:
        async with state.proxy() as data:
            data['cardnum'] = message.text
        conn = sqlite3.connect('db.db')
        c = conn.cursor()
        c.execute("SELECT * FROM cards WHERE oID = ?", (message.from_user.id,))
        cardfrom = c.fetchone()
        c.execute("SELECT * FROM cards WHERE Number = ?", (data['cardnum'],))
        cardto = c.fetchone()
        c.execute("SELECT * FROM ban WHERE Nickname = ?", (cardto[1],))
        banlist = c.fetchone()
        if cardfrom[0] == cardto[0]:
            await bot.send_message(message.chat.id, f'üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ!', reply_markup=bank_kb)
            await state.finish()
            await banking(message)
        elif banlist is not None:
            await bot.send_message(message.chat.id, f'üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤', reply_markup=bank_kb)
            state.finish()
        else:
            await TransferForm.next()
            await message.reply("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞")

@dp.message_handler(lambda message: not message.text.isdigit(), state=TransferForm.amount)
async def amount_invalid(message: types.Message):
    return await message.reply("üö´ –°—É–º–º–∞ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä!\n–í–≤–µ–¥–∏—Ç–µ –µ—ë –ø–æ–≤—Ç–æ—Ä–Ω–æ")

@dp.message_handler(lambda message: message.text.isdigit(), state=TransferForm.amount)
async def amount(message: types.Message, state: FSMContext):
    # Update state and data
    conn = sqlite3.connect('db.db')
    c = conn.cursor()
    c.execute("SELECT * FROM cards WHERE oID = ?", (message.from_user.id,))
    cardfrom = c.fetchone()
    if int(cardfrom[4]) < int(message.text):
        await message.reply("üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!")
    elif int(message.text) == 0:
        await message.reply("üö´ –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–æ–ª—å –∏–ª–∏ –º–µ–Ω—å—à–µ!")
    else:
        await TransferForm.next()
        await state.update_data(amount=int(message.text))
        await message.reply("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É")

@dp.message_handler(state=TransferForm.comment)
async def comment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['comment'] = message.text
    conn = sqlite3.connect('db.db')
    c = conn.cursor()
    c.execute("SELECT * FROM cards WHERE oID = ?", (message.from_user.id,))
    cardfrom = c.fetchone()
    c.execute("SELECT * FROM cards WHERE Number = ?", (data['cardnum'],))
    cardto = c.fetchone()
    Amountcardfrom = int(cardfrom[4]) - int(data['amount'])
    c.execute("UPDATE cards SET Amount = ? WHERE oID = ?", (Amountcardfrom, message.from_user.id))
    conn.commit()
    conn.close()
    Amountcardto = int(cardto[4]) + int(data['amount'])
    conn = sqlite3.connect('db.db')
    c = conn.cursor()
    c.execute("UPDATE cards SET Amount = ? WHERE Number = ?", (Amountcardto, data['cardnum']))
    conn.commit()
    conn.close()
    TransactionDateTime = now.strftime("%d.%m.%y %H:%M:%S")
    conn = sqlite3.connect('db.db')
    c = conn.cursor()
    c.execute("INSERT INTO Transactions VALUES (?, ?, ?, ?)",
              (message.from_user.id, data['cardnum'], TransactionDateTime, data['amount']))
    conn.commit()
    conn.close()
    amount = data['amount']
    comment = data['comment']
    await bot.send_message(message.chat.id,
                           f'üí∏ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n–ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {cardto[2]} **{cardto[3]}\n–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {amount} –ê–†', reply_markup=bank_kb)
    await bot.send_message(cardto[0], f'‚ö°Ô∏è –ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç {cardfrom[1]}\n–ö–∞—Ä—Ç–∞ {cardto[2]} **{cardto[3]}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {amount} –ê–†\n–ë–∞–ª–∞–Ω—Å: {Amountcardto} –ê–†')

    # Finish conversation
    await state.finish()

@dp.message_handler(state=senderForm.sender)
async def sender(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('db.db')
    c = conn.cursor()
    c.execute('SELECT * FROM cards')
    rows = c.fetchall()
    c.close()
    conn.close()
    for row in rows:
        await bot.send_message(row[0], message.text)
    await message.reply(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(rows)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', reply_markup=bank_kb)
    await state.finish()

@dp.message_handler(state=clientReg.cID)
async def clReg(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cID'] = message.text
    await clientReg.next()
    await message.reply(f'–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞')

@dp.message_handler(state=clientReg.Nickname)
async def clRegN(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Nickname'] = message.text
    conn = sqlite3.connect('db.db')
    c = conn.cursor()
    c.execute("SELECT * FROM ban WHERE Nickname = ?", (data['Nickname'],))
    ban = c.fetchone()
    if ban is None:
        await bot.send_message(data['cID'],
                               f'‚ö°Ô∏è –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å—á—ë—Ç–∞ –≤ –ë–µ—Ç–∞-–ë–∞–Ω–∫–µ!\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üíµ –ë–∞–Ω–∫')
        conn = sqlite3.connect('db.db')
        c = conn.cursor()
        cardnumber = random.randint(100000, 999999)
        c.execute("INSERT INTO cards VALUES (?, ?, ?, ?, 0)", (data['cID'], data['Nickname'], '–ë–µ—Ç–∞-–ö–∞—Ä—Ç–∞', cardnumber))
        conn.commit()
        conn.close()
        await message.reply('‚úÖ –°—á—ë—Ç –æ—Ç–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ.', reply_markup=bank_kb)
        await state.finish()
    else:
        await bot.send_message(data['cID'],
                               f'üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—á—ë—Ç –≤ –±–∞–Ω–∫–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–∞ –≤–∞—Å –±—ã–ª–∏ –Ω–∞–ª–æ–∂–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–∑–ª–æ–∂–µ–Ω–∞ –Ω–∏–∂–µ.\n{ban[1]}')
        await message.reply(f'üö´ –û—Ç–∫–∞–∑ –≤ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—á—ë—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n–†–µ—Ñ–µ—Ä–µ–Ω—Å: {ban[1]}', reply_markup=bank_kb)
        await state.finish()

@dp.message_handler(state=topup.cardnum)
async def clientTopUp(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cardnum'] = message.text
    conn = sqlite3.connect('db.db')
    c = conn.cursor()
    c.execute("SELECT * FROM cards WHERE Number = ?", (data['cardnum'],))
    card = c.fetchone()
    if card is None:
        await message.reply(f'–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã')
    else:
        c.execute("SELECT * FROM ban WHERE Nickname = ?", (card[1],))
        ban = c.fetchone()
        if ban is None:
            await topup.next()
            await message.reply(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')
        else:
            await message.reply(
                f'üö´ –û—Ç–∫–∞–∑ –≤–æ –≤–Ω–µ—Å–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç.\n–°–æ–æ–±—â–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –æ —Ç–æ–º, —á—Ç–æ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å—á—ë—Ç—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –≤—ã–¥–∞—á–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö\n–ü—Ä–∏—á–∏–Ω–∞: {ban[1]}',
                reply_markup=bank_kb)
            await state.finish()
@dp.message_handler(state=topup.tuAmount)
async def clientTopUpA(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['tuAmount'] = message.text
        conn = sqlite3.connect('db.db')
        c = conn.cursor()
        c.execute("SELECT * FROM cards WHERE Number = ?", (data['cardnum'],))
        card = c.fetchone()
        Amount = card[4] + int(data['tuAmount'])
        c.execute("UPDATE cards SET Amount = ? WHERE Number = ?", (Amount, data['cardnum']))
        TransactionDateTime = now.strftime("%d.%m.%y %H:%M:%S")
        c.execute("SELECT * FROM Employees WHERE ID = ?", (message.from_user.id,))
        employee = c.fetchone()
        c.execute("INSERT INTO Transactions VALUES (?, ?, ?, ?)",
                  (str(f'{employee[1]}[Office]'), data['cardnum'], TransactionDateTime,
                   data['tuAmount']))
        conn.commit()
        conn.close()
        tuamount = data['tuAmount']
        await bot.send_message(card[0],
                               f'‚ö°Ô∏è –í–Ω–µ—Å–µ–Ω–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö –Ω–∞ —Å—á—ë—Ç\n–ö–∞—Ä—Ç–∞ {card[2]} **{card[3]}\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee[1]}\n–°—É–º–º–∞: {tuamount} –ê–†\n–ë–∞–ª–∞–Ω—Å: {Amount} –ê–†')
        await message.reply(f'‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: **{card[3]}\n–í–Ω–µ—Å–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {tuamount} –ê–†', reply_markup=bank_kb)
        await state.finish()

@dp.message_handler(state=withdrawal.cardnum)
async def clientwithdrawal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cardnum'] = message.text
    conn = sqlite3.connect('db.db')
    c = conn.cursor()
    c.execute("SELECT * FROM cards WHERE Number = ?", (data['cardnum'],))
    card = c.fetchone()
    if card is None:
        await message.reply(f'üö´ –í–≤–µ–¥—ë–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã')
    else:
    
        await withdrawal.next()
        await message.reply(f'üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è —Å–æ —Å—á—ë—Ç–∞')

@dp.message_handler(state=withdrawal.tuAmount)
async def clientwithdrawalA(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['tuAmount'] = message.text
        conn = sqlite3.connect('db.db')
        c = conn.cursor()
        c.execute("SELECT * FROM cards WHERE Number = ?", (data['cardnum'],))
        card = c.fetchone()
        if card[4] < int(data['tuAmount']):
            await message.reply(f'üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É', reply_markup=bank_kb)
            await state.finish()
        else:
            Amount = card[4] - int(data['tuAmount'])
            c.execute("UPDATE cards SET Amount = ? WHERE Number = ?", (Amount, data['cardnum']))
            TransactionDateTime = now.strftime("%d.%m.%y %H:%M:%S")
            c.execute("SELECT * FROM Employees WHERE ID = ?", (message.from_user.id,))
            employee = c.fetchone()
            c.execute("INSERT INTO Transactions VALUES (?, ?, ?, ?)",
                      (str(f'{employee[1]}[Office]'), data['cardnum'], TransactionDateTime, f"-{data['tuAmount']}"))
            conn.commit()
            conn.close()
            tuamount = data['tuAmount']
            await bot.send_message(card[0],
                                   f'‚ö°Ô∏è –°–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö —Å–æ —Å—á—ë—Ç–∞\n–ö–∞—Ä—Ç–∞ {card[2]} **{card[3]}\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee[1]}\n–°—É–º–º–∞: {tuamount} –ê–†\n–ë–∞–ª–∞–Ω—Å: {Amount} –ê–†')
            await message.reply(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: **{card[3]}\n–°—É–º–º–∞ –∫ –≤—ã–¥–∞—á–µ: {data['tuAmount']} –ê–†", reply_markup=bank_kb)
            await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)